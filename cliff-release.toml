# git-cliff ~ release notes configuration
# https://git-cliff.org/docs/configuration
#
# This config is specifically for GitHub release notes with download links

[changelog]
# template for the changelog body (no header needed for release notes)
body = """
{%- macro remote_url() -%}
  https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}
{%- endmacro -%}

{% if version %}\
## 📦 Downloads

### Binary Downloads
Compressed archives containing platform-specific binaries:

- **Linux (x64)**: [`1mcp-linux-x64.tar.gz`]({{ self::remote_url() }}/releases/download/v{{ version | trim_start_matches(pat="v") }}/1mcp-linux-x64.tar.gz)
- **Linux (ARM64)**: [`1mcp-linux-arm64.tar.gz`]({{ self::remote_url() }}/releases/download/v{{ version | trim_start_matches(pat="v") }}/1mcp-linux-arm64.tar.gz)
- **Windows (x64)**: [`1mcp-win32-x64.zip`]({{ self::remote_url() }}/releases/download/v{{ version | trim_start_matches(pat="v") }}/1mcp-win32-x64.zip)
- **macOS (ARM64)**: [`1mcp-darwin-arm64.tar.gz`]({{ self::remote_url() }}/releases/download/v{{ version | trim_start_matches(pat="v") }}/1mcp-darwin-arm64.tar.gz)
- **macOS (Intel)**: [`1mcp-darwin-x64.tar.gz`]({{ self::remote_url() }}/releases/download/v{{ version | trim_start_matches(pat="v") }}/1mcp-darwin-x64.tar.gz)

### Docker Images
```bash
# Extended version (recommended)
docker pull ghcr.io/1mcp-app/agent:v{{ version | trim_start_matches(pat="v") }}
docker pull ghcr.io/1mcp-app/agent:latest

# Lite version (minimal dependencies)
docker pull ghcr.io/1mcp-app/agent:v{{ version | trim_start_matches(pat="v") }}-lite
docker pull ghcr.io/1mcp-app/agent:lite
```

### NPM Installation
```bash
npm install -g @1mcp/agent
```

{% endif %}\

{% for group, commits in commits | group_by(attribute="group") %}
### {{ group | striptags | trim | upper_first }}
{%- for commit in commits %}
- {{ commit.message | split(pat="\n") | first | upper_first | trim }}\
    {% if commit.remote.username %} by @{{ commit.remote.username }}{%- endif -%}
    {% if commit.remote.pr_number %} in \
    [#{{ commit.remote.pr_number }}]({{ self::remote_url() }}/pull/{{ commit.remote.pr_number }}) \
    {%- endif -%}
{% endfor %}
{% endfor %}

{%- if github.contributors | filter(attribute="is_first_time", value=true) | length != 0 %}
## New Contributors
{%- endif -%}

{% for contributor in github.contributors | filter(attribute="is_first_time", value=true) %}
* @{{ contributor.username }} made their first contribution
  {%- if contributor.pr_number %} in \
    [#{{ contributor.pr_number }}]({{ self::remote_url() }}/pull/{{ contributor.pr_number }}) \
  {%- endif %}
{%- endfor %}

**Full Changelog**: {{ self::remote_url() }}/compare/{{ previous.version }}...{{ version }}
"""
# remove the leading and trailing whitespace from the template
trim = true
# changelog footer
footer = """
<!-- generated by git-cliff -->
"""
# postprocessors
postprocessors = [
  # { pattern = '<REPO>', replace = "https://github.com/orhun/git-cliff" }, # replace repository URL
]

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
  # Replace issue numbers
  #{ pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](<REPO>/issues/${2}))"},
  # Check spelling of the commit with https://github.com/crate-ci/typos
  # If the spelling is incorrect, it will be automatically fixed.
  #{ pattern = '.*', replace_command = 'typos --write-changes -' },
]
# regex for parsing and grouping commits
commit_parsers = [
  { message = "^feat", group = "<!-- 0 -->🚀 Features" },
  { message = "^fix", group = "<!-- 1 -->🐛 Bug Fixes" },
  { message = "^doc", group = "<!-- 3 -->📚 Documentation" },
  { message = "^perf", group = "<!-- 4 -->⚡ Performance" },
  { message = "^refactor", group = "<!-- 2 -->🚜 Refactor" },
  { message = "^style", group = "<!-- 5 -->🎨 Styling" },
  { message = "^test", group = "<!-- 6 -->🧪 Testing" },
  { message = "^chore\\(release\\): prepare for", skip = true },
  { message = "^chore\\(deps.*\\)", skip = true },
  { message = "^chore\\(pr\\)", skip = true },
  { message = "^chore\\(pull\\)", skip = true },
  { message = "^chore: update changelog", skip = true },
  { message = "^Init commit", skip = true },
  { message = "^chore|^ci", group = "<!-- 7 -->⚙️ Miscellaneous Tasks" },
  { body = ".*security", group = "<!-- 8 -->🛡️ Security" },
  { message = "^revert", group = "<!-- 9 -->◀️ Revert" },
  { message = ".*", group = "<!-- 10 -->💼 Other" },
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = false
# regex for matching git tags
# tag_pattern = "v[0-9].*"
# regex for skipping tags
# skip_tags = ""
# regex for ignoring tags
# ignore_tags = ""
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
# limit the number of commits included in the changelog.
# limit_commits = 42

[remote.github]
owner = "1mcp-app"
repo = "agent"
token = ""
